import unittest

from bs4 import BeautifulSoup
from io import StringIO
from unittest.mock import patch, Mock

from solution import *


class TestParserAnimals(unittest.TestCase):
    @patch('requests.get')
    def test_parser_page(self, mock_get):
        # Подготовка фиктивных данных
        mock_response = Mock()
        mock_response.text = '<html><body></body></html>'
        mock_get.return_value = mock_response
        parser_animals = ParserAnimals(CATEGORY_URL, BeautifulSoup)
        parser_animals.parser_page()
        self.assertTrue(isinstance(parser_animals.parser, BeautifulSoup))

    def test_get_dict_name(self):
        parser_animals = ParserAnimals(CATEGORY_URL, BeautifulSoup)
        parser_animals.parser_page()
        dict_name = parser_animals.get_dict_name()
        expected = {'А': {'Азиатские кошачьи акулы (род)', 'Австралийская выпь', 'Абиссинская сизоворонка', 'Австралийская кунья акула', 'Австралийский морской ангел', 'Адамантизавр', 'Адмиралтейская летучая лисица', 'Австралийский нактус', 'Австралийская центрина', 'Авдотковые', 'Аверостры', 'Австралийский странник', 'Агуйа', 'Австралийская коралловая кошачья акула', 'Австралийский морской бекас', 'Австралийская скумбрия', 'Азарская мирикина', 'Австралийский толстохвостый геккон', 'Азиатская широкоушка', 'Австралийская пеламида', 'Австралийские зарянки', 'Агамы (род)', 'Азиатские горные агамы', 'Авроры', 'Австралийские медноголовые змеи', 'Австрораптор', 'Аждархо', 'Абелизавриды', 'Абиссинский рогатый ворон', 'Австралийский бурый ястреб', 'Австралийский ибис', 'Адмирал (бабочка)', 'Австралийская саранча', 'Адаписообразные', 'Австралийская длиннорылая акула', 'Австралийский кулик-сорока', 'Азалиевая тощая моль', 'Аддакс', 'Австралийская шилоклювка', 'Агриохорус', 'Авиатираннис', 'Агамиксисы', 'Агаристиновые', 'Австралийский цветной бекас', 'Австралопитеки', 'Агути Азары', 'Азиатские линзанги', 'Австралийские дрозды', 'Австралийская ехидна', 'Аждархоиды', 'Агономал Джордена', 'Азиатские оленьки', 'Азиатская база', 'Австралийский шишечник', 'Австралийский узкорылый крокодил', 'Аделоспондилы', 'Агути', 'Азиатские кошачьи акулы', 'Австралийский гидролаг', 'Агриолимациды', 'Австралийский орляк', 'Агапантия белобокая', 'Авлациды', 'Австралийский пеликан', 'Австриадактиль', 'Агамозубые двуходки', 'Агоноксениды', 'Австралийские губаны', 'Австралийский серебристый горбыль', 'Адриатическая морская собачка', 'Азиатские сухопутные черепахи', 'Австралийская головастая акула', 'Авеметатарзалии', 'Агама Столички', 'Азиатские калао', 'Австралийский древесный варан', 'Австралийская граллина', 'Агономалы', 'Азиатские моллюскоеды Ваглера', 'Аардоникс', 'Абрауская тюлька', 'Авиалы', 'Австралийский гладколобый удильщик', 'Агностиды', 'Австралийский блестящий чирок', 'Абронии', 'Авимим', 'Азербайджанская ящерица', 'Азиатские буйволы', 'Австралийский бычерыл', 'Австралийская савка', 'Адазавр', 'Австралийские змеиношеие черепахи', 'Австралийская поганка', 'Австралийская змеешейка', 'Австралийский нырок', 'Австралопитек гархи', 'Австралийская пятнистая макрель', 'Австралопитек седиба', 'Австралийский ложный вампир', 'Авацератопс', 'Австралийские широкороты', 'Австралийский морской лев', 'Австралийская пятнистая кошачья акула', 'Агамуры', 'Агилизавр', 'Австралийская сипуха', 'Австралийская зелёная черепаха', 'Австралийская чайка', 'Абелизавр', 'Абудефдуфы', 'Австралийский погоныш', 'Абиссинский заяц', 'Австралийский колючепёр', 'Агамы-бабочки', 'Австралийский пегий кулик-сорока', 'Австралийские водяные крысы', 'Австралийская большая дрофа', 'Австралийская змеиношеяя черепаха', 'Агама-ситана', 'Абботины', 'Аджарская ящерица', 'Австралийский тунец', 'Австралийская пеганка', 'Австралийская ворона', 'Адериды', 'Австралийский журавль', 'Азиатская бескоготная выдра', 'Адмирал индийский', 'Адагумский гольян', 'Агамовые', 'Агутиевые', 'Авдотка', 'Австралийский перепел', 'Аденская чайка', 'Австралийская минога', 'Агаониды', 'Азиатские косатки', 'Азиатская кунья акула', 'Австралийские вельветки', 'Абидозавр', 'Азиатские пресноводные черепахи', 'Агнотозои', 'Австралийская мангровая змея', 'Агама Савиньи', 'Адский вампир', 'Австралийская крачка', 'Агустиния', 'Азиатские куропатки', 'Австралийская рыба-лента', 'Азиатские мабуи', 'Агама колонистов', 'Австралийские толстохвостые гекконы', 'Австралийский совиный козодой', 'Австралийский орёл-карлик', 'Агути Калиновского', 'Абингдонская слоновая черепаха', 'Абия прибайкальская', 'Австралийская короткошипая акула', 'Аброзавр', 'Адалии', 'Австралийская птица-колокольчик', 'Австралийский ремнезуб', 'Агами', 'Австралийские квакши', 'Австралийский пилонос', 'Агамы-псевдотрапелусы', 'Австралийские змееящерицы', 'Азиатская кошачья акула', 'Азиатские килеспинные ужи', 'Австралийская бычья акула', 'Австрало-новозеландский эпигонус', 'Авдотки', 'Агрозавр', 'Аждархиды', 'Адрианихты', 'Агапантия казахстанская', 'Аглии', 'Австралийская нематалоза', 'Австралийский чеглок', 'Агиртиды', 'Австралийский ворон', 'Адаписы', 'Адинотерии', 'Абиссобротула', 'Австралийская болотная крыса', 'Адрианихтиевые', 'Азиатская корюшка', 'Австраловенатор', 'Австралийские пятнистые кошачьи акулы', 'Австралийская авдотка', 'Абрикосовая ципрея', 'Адриатический осётр', 'Австралийские жабы', 'Австралийская олуша', 'Австрало-новозеландский гнюс', 'Азиатская цивета', 'Австралоазиатские пауки', 'Австралийская широконоска', 'Австралийский питон Рамсея'}}
        self.assertDictEqual(dict_name, expected)

    def test_next_page(self):
        parser = ParserAnimals(CATEGORY_URL, BeautifulSoup)
        parser.parser = BeautifulSoup(
        '''
        <div class="mw-category-generated">
        <a href="/wiki/%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80">Следующая страница</a>
        </div>
        ''', 'lxml')
        parser.next_page()
        self.assertIn('/wiki/%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%80', parser.url)

    def test_count_animals_by_letter(self):
        dict_name = {'A': ["Антилопа"], 'B': ["Барсук"]}
        dict_count = {}
        result = count_animals_by_letter(dict_name, dict_count)
        expected = {'A': 1, 'B': 1}
        self.assertDictEqual(result, expected)

    def test_data_rec_file(self):
        output_file = "test_beasts.csv"
        dict_count = {'А': 1, 'Б': 2}
        data_rec_file(output_file, dict_count)
        with open(output_file, newline='', encoding='utf-8') as file:
            reader = csv.reader(file)
            rows = list(reader)
        expected_rows = [['А', '1'], ['Б', '2']]
        self.assertEqual(rows, expected_rows)

    def test_filter_rus_letter(self):
        self.assertFalse(filter_rus_letter('Zebra'))  # Латинская буква
        self.assertTrue(filter_rus_letter('Зебра'))   # Русская буква


if __name__ == '__main__':
    unittest.main()
